@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    if (!Roles.IsUserInRole("admin") && !Roles.IsUserInRole("booked"))
    {
        Response.Redirect("~/Default.cshtml");
    }
    Layout = "~/_LoginLayout.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    var manv = "";
    var email = "";
    var password = "123456";
    var department = "";
    var position = "";
    var fullname = "";
    var db = Database.Open("StarterSite");
    //List<string> listDepartment = new List<string>();
    //List<string> listPosition = new List<string>();

    var listDepartment = db.Query("SELECT * FROM department");
    var listPosition = db.Query("SELECT * FROM position");
    
    // Setup validation
    Validation.RequireField("MaNV", "Bạn phải nhập mã số thẻ.");
    Validation.RequireField("fullname", "Bạn phải nhập họ tên.");
    Validation.RequireField("email", "Bạn phải nhập tên đăng nhập.");
    Validation.RequireField("department", "You must specify an email address.");
    //Validation.RequireField("email", "You must specify an email address.");
    
    //Validation.RequireField("password", "Password cannot be blank.");
    //Validation.Add("confirmPassword",
    //    Validator.EqualsTo("password", "Password and confirmation password do not match."));
    //Validation.Add("password",
    //    Validator.StringLength(
    //        maxLength: Int32.MaxValue,
    //        minLength: 6,
    //        errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        manv = Request.Form["manv"].Trim();
        email = Request.Form["email"].Trim();
        //password = Request.Form["password"];
        //confirmPassword = Request.Form["confirmPassword"];
        department = Request.Form["department"].Trim();
        position = Request.Form["position"].Trim();
        fullname = Request.Form["fullname"].Trim();
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email,Department,Position,FullName,MaNV) VALUES (@0,@1,@2,@3,@4)", email,department,position,fullname,manv);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try
                {
                    //bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    bool requireEmailConfirmation = false;
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation)
                    {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation)
                    {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    }
                    else
                    {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                }
                catch (System.Web.Security.MembershipCreateUserException e)
                {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Tài khoản này đã được sử dụng");
            }
        }
    }
}

<hgroup class="title">
    <h1>Tạo tài khoản</h1>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Tạo tài khoản thất bại", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset>
        <legend>Registration Form</legend>
        <ol>
            <li>
                <label>Mã số thẻ(2xxxx)</label>
                <input type="text" name="MaNV" value="@manv" @Validation.For("MaNV") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("MaNV")
            </li>
            <li class="email">
                <label>Họ và tên</label>
                <input type="text" name="fullname" value="@fullname" @Validation.For("fullname") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("fullname")
            </li>
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Tên đăng nhập</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </li>
          @*  <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password</label>
                <input type="password" id="password" name="password" @Validation.For("password") />
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @Html.ValidationMessage("confirmPassword")
            </li>*@
            <li>
                <label for="department">Department</label>
                 <select name="department">
                    <option>--Phòng Ban--</option>
                     @foreach (var row in listDepartment) { 
                        <option value="@row.id">@row.name</option>
                     }
                    
                </select>
            </li>
            <li>
                <label for="position">Position</label>
                <select name="position">
                    <option>--Chức Vụ--</option>
                     @foreach (var row in listPosition) { 
                        <option value="@row.id">@row.name</option>
                     }
                </select>
            </li>
            <!--<li class="recaptcha">
                <div class="message-info">
                    <p>
                        To enable CAPTCHA verification, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">install the 
                        ASP.NET Web Helpers Library</a> and uncomment ReCaptcha.GetHtml and replace 'PUBLIC_KEY'
                        with your public key. At the top of this page, uncomment ReCaptcha. Validate and
                        replace 'PRIVATE_KEY' with your private key.
                        Register for reCAPTCHA keys at <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div>
                @*
                @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @Html.ValidationMessage("recaptcha")
                *@
            </li>-->
        </ol>
        <input type="submit" value="Đăng Ký" />
    </fieldset>
</form>