@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_LoginLayout.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        } else if (Validation.IsValid()) {
            email = Request.Form["email"];
            
            //password = Request.Form["password"];
            password = Request.Unvalidated("password");
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow) {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }
            if (!WebSecurity.UserExists(email)){
                string message_error = "Tài khoản không tồn tại trong hệ thống.";
                AppState["message_error"] = message_error;
                Response.Redirect("~/Error.cshtml");
                return;
            }
            // Attempt to log in using provided credentials
            if(Functions.LoginDomain(email, password)){
                if (WebSecurity.Login(email, password, rememberMe))
                {
                    Response.Cookies[0].Expires = DateTime.Now.AddDays(30); // added
                    Context.RedirectLocal(returnUrl);
                    return;
                }
                else
                {
                    //MAYBE USER CHANGE OUTLOOK PASSWORD, UPDATE PASSWORD AND LOGIN WITH NEW PASSWORD
                    string passwordResetToken = WebSecurity.GeneratePasswordResetToken(email,1);
                    WebSecurity.ResetPassword(passwordResetToken, password);
                    if (WebSecurity.Login(email, password, rememberMe))
                    {
                        Response.Cookies[0].Expires = DateTime.Now.AddDays(30); // added
                        Context.RedirectLocal(returnUrl);
                        return;
                    }
                    else
                    {
                        ModelState.AddFormError("Can not reset password");
                    }
                }
            }else {
                ModelState.AddFormError("Username hoặc Password không đúng");
            }

        }
    }
}

<section id="loginForm">
     
    <form method="post">
        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary("", excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>Đăng nhập vào tài khoản của bạn</legend>
            <ol>
                <li class="email">
                    <label for="email" @if (!ModelState.IsValidField("email"))
                                       {<text>class="error-label"</text>}>Tên đăng nhập</label>
                    <input type="text" id="email" name="email" value="@email" @Validation.For("email")/>
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("email")
                </li>
                <li class="password">
                    <label for="password" @if (!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Mật khẩu</label>
                    <input type="password" id="password" name="password" @Validation.For("password")/>
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("password")
                </li>
                <li class="remember-me">
                    <input type="checkbox" id="rememberMe" name="rememberMe" value="true" checked="@rememberMe" />
                    <label class="checkbox" for="rememberMe">Ghi nhớ</label>
                    <label class="error"></label>
                </li>
            </ol>
            <input type="submit" value="Đăng nhập" />
        </fieldset>
    </form>
</section>

@*<section class="social" id="socialLoginForm">
    <img src="~/Images/14.jpg" width="530" height="263" />
</section>*@
